worker_processes 4;

events { worker_connections 1024; }

http {
    include       mime.types;
    default_type  application/octet-stream;
    client_max_body_size 20M;
    sendfile        on;

    # If Tailscale forwards X-Forwarded-Proto, prefer it; otherwise fall back to $scheme.
    map $http_x_forwarded_proto $proxy_xfp {
        default $scheme;
        "~*^https$" https;
    }

    upstream flask_server {
        server web:8000;
        # Upstream keepalive to your Gunicorn app (reduces TCP churn)
        keepalive 64;
    }

    server {
        listen 80;
        server_name bryant-liu-darth-vader;

        ## Better static file handling
        # location /static/ {
        #     proxy_pass http://flask_server/static/;
        #     # Preserve the original Host header (your domain or IP).
        #     proxy_set_header Host $host;
        #     # Put the client’s direct IP into X-Real-IP for the app to see.
        #     proxy_set_header X-Real-IP $remote_addr;
        #     # Append the client IP to X-Forwarded-For chain (preserves proxy history).
        #     proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            
            
        #     # Tell the app the original scheme/host/port it should consider "external".
        #     # You HARD-CODED https/443 here. That is correct *only if* TLS is terminated
        #     # *before* NGINX (e.g., a load balancer or Tailscale/Cloudflare doing HTTPS)
        #     # and NGINX itself receives plain HTTP. Otherwise use $scheme/$server_port.
        #     # proxy_set_header X-Forwarded-Proto $scheme;
        #     proxy_set_header X-Forwarded-Proto   $scheme;
        #     # proxy_set_header X-Forwarded-Proto   https;
        #     proxy_set_header X-Forwarded-Host    $host;
        #     # proxy_set_header X-Forwarded-Port    443;

        #     # Use HTTP/1.1 to enable upstream keepalive and disable hop-by-hop header
        #     proxy_http_version 1.1;
        #     proxy_set_header Connection "";
            
        #     # Allow any origin to fetch these static assets (simple CORS).
        #     # NOTE: add_header by default applies to 2xx/3xx only. Use 'always' if needed.
        #     add_header Access-Control-Allow-Origin *;
        #     # tip: For real CORS support, you may also add methods/headers and handle OPTIONS.
        # }

        # Serve static files directly
        location /static/ {
            alias /var/www/static/;    # map /static/ URL → mounted folder
            access_log off;
            expires 1y;
            add_header Cache-Control "public, max-age=31536000, immutable";
            add_header Access-Control-Allow-Origin *;
        }

        # -------- App --------
        location / {
            proxy_pass http://flask_server;
            proxy_set_header Host              $host;
            proxy_set_header X-Real-IP         $remote_addr;
            proxy_set_header X-Forwarded-For   $proxy_add_x_forwarded_for;

            # Prefer header from Tailscale if present, else scheme
            proxy_set_header X-Forwarded-Proto $proxy_xfp;  # honors Tailscale HTTPS
            proxy_set_header X-Forwarded-Host  $host;
            proxy_set_header X-Forwarded-Port  443;

            # HTTP/1.1 + no Connection header => upstream keepalive works
            proxy_http_version 1.1;
            proxy_set_header Connection "";


            # Archive
            # proxy_set_header X-Forwarded-Proto $scheme;
            # proxy_set_header X-Forwarded-Proto   https;
            # proxy_set_header X-Forwarded-Host    $host;
            # proxy_set_header X-Forwarded-Port    443;


            # Disable NGINX’s default rewriting of Location/Refresh headers in upstream
            # responses. With 'off', if your app issues redirects to its internal name
            # (e.g., http://web:8000), those will pass through AS-IS and may break in browsers.
            # If you see weird redirects, prefer an explicit mapping like:
            #   proxy_redirect http://web:8000/ /;
            proxy_redirect off;
        }
    }
}